select * from fact
select * from Location
select * from Product

--Q1.Display the number of states present in the Location Table
select  count( distinct State) from Location

--Q2.How many products are of regular type?
select count(Type) from Product where Type = 'Regular'

--Q3.How much spending has been done on marketing of product ID 1?
select sum(Marketing) as 'total Expense on Marketing'from fact where ProductId = 1

--Q4 What is the minimum sales of a product?
select productId, min(Sales) as 'Minimum sales' from fact
group by productId
order by productId

--Q5.Display the max Cost of Good Sold (COGS).
select max(COGS) as 'Max Cost of Good sold' from fact

--Q6.. Display the details of the product where product type is coffee
select * from Product where Product_type = 'Coffee'

--Q7.Display the details where total expenses are greater than 40.
select * from fact where Total_Expenses > 40

--Q8.. What is the average sales in area code 719?
select avg(Sales) as 'Average sales' from fact where Area_Code = 719

--Q9.Find out the total profit generated by Colorado state.
select sum(fact.profit) as 'Total Profit' from Fact 
left join Location on fact.Area_code = Location.Area_Code where Location.State = 'Colorado'

--Q10.Display the average inventory for each product ID.
select ProductId,avg(Inventory) as 'Average Inventory' from fact
group by productId
order by productId

--Q11.Display state in a sequential order in a Location Table.
select distinct state from Location order by state

--Q12.Display the average budget of the Product where the average budget margin should be greater than 100.
select productId, avg(budget_margin) from fact
group by productId
having avg(budget_margin) > 100

--Q13.What is the total sales done on date 2010-01-01?
select sum(Sales) as 'Total Sales' from fact where Date = '2010-01-01'

--Q14.Display the average total expense of each product ID on an individual date.
select date,ProductId,avg(Total_Expenses) as 'Average total expense' from fact 
group by date,ProductId
order by ProductId

--Q15.Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code.
select f.date,
f.productId,
p.product_type,
p.product,
f.sales,
f.profit,
l.state,
f.area_code
from fact f
inner join location L on L.Area_Code = f.Area_Code
inner join product p on p.ProductId = f.ProductId

--Q16.Display the rank without any gap to show the sales wise rank.
select *,ROW_NUMBER() OVER(ORDER BY Sales) AS 'Rank' from fact

--Q17.Find the state wise profit and sales.
select L.State,sum(f.profit) as 'Total Profit',sum(f.sales) as 'Total Sales'
from fact f
inner join Location L on L.Area_Code = f.Area_Code
Group by L.State

--Q18.Find the state wise profit and sales along with the productname.
select L.State,P.Product,sum(f.profit) as 'Total Profit',sum(f.sales) as 'Total Sales'
from fact f
inner join Location L on L.Area_Code = f.Area_Code
inner join Product P on P.ProductId = f.ProductId
Group by L.State,P.Product
order by L.State

--Q19.If there is an increase in sales of 5%, calculate the increased sales.
select *,(sales+(sales*0.05)) as 'Increased Sales' from fact

--Q20.Find the maximum profit along with the product ID and product type.
select f.productId,P.product_type,max(Profit) as 'Maximum Profit' from fact f
inner join Product P on p.productId = f.productId
group by f.productId,p.product_type

--Q21.Create a stored procedure to fetch the result according to the product type from Product Table.
create procedure pType
@prod_type varchar(25)
as
select * from product
where product_type = @prod_type
exec pType @prod_type = 'Coffee'
--Q22.Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.
select * ,
case
when Total_Expenses >= 60 then 'Loss'
else 'Profit'
end as 'Profit/Loss'
from fact

--Q23.Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order.
select datepart(week,date) as 'week_num',productId,sum(sales) from fact
group by datepart(week,date),productId
with rollup
--Q24.Apply union and intersection operator on the tables which consist of attribute area code.
select area_code from fact
union 
select area_code from Location

select area_code from fact
intersect
select area_code from Location

--Q25.Create a user-defined function for the product table to fetch a particular product type based upon the userâ€™s preference.
CREATE FUNCTION product_function (
  @variable varchar(255)
) RETURNS TABLE AS RETURN 
SELECT 
  * 
FROM 
  product 
WHERE 
  product_Type = @variable;
 select * from product_function('Coffee')
--Q26.Change the product type from coffee to tea where product ID is 1 and undo it.
update product set product_type = 'Tea' where productId = 1
select * from product
update product set product_type = 'Coffee' where productId = 1
--Q27.Display the date, product ID and sales where total expenses are between 100 to 200.
select date,productId,sales from fact where total_expenses between 100 and 200

--Q28.Delete the records in the Product Table for regular type.
delete from product where product_type = 'Regular'
--Q29.Display the ASCII value of the fifth character from the column Product.
select product, ASCII(substring(Product,5,1)) as 'Ascii Value' from Product
